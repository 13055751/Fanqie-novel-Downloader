name: 自动编译发布

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # 手动触发

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置Python环境
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: 生成版本号
      id: version
      run: |
        $timestamp = Get-Date -Format "yyyy.MM.dd.HHmm"
        $commit_short = "${{ github.sha }}".Substring(0, 7)
        $version = "$timestamp-$commit_short"
        echo "VERSION=$version" >> $env:GITHUB_OUTPUT
        echo "TIMESTAMP=$timestamp" >> $env:GITHUB_OUTPUT
        echo "Generated version: $version"
      shell: powershell
      
    - name: 更新版本信息
      run: |
        $version = "${{ steps.version.outputs.VERSION }}"
        $timestamp = "${{ steps.version.outputs.TIMESTAMP }}"
        
        # 创建版本信息文件
        @"
        VERSION = "$version"
        BUILD_TIME = "$timestamp"
        COMMIT_HASH = "${{ github.sha }}"
        BRANCH = "${{ github.ref_name }}"
        "@  | Out-File -FilePath "version.py" -Encoding UTF8
        
        echo "Version file created:"
        Get-Content "version.py"
      shell: powershell
      
    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: 编译可执行文件
      run: |
        # 创建PyInstaller配置
        pyinstaller --onefile --windowed --name "TomatoNovelDownloader-${{ steps.version.outputs.VERSION }}" GUI.py
        
        # 复制必要文件到dist目录
        if (Test-Path "dist") {
          Copy-Item "README.md" "dist/" -ErrorAction SilentlyContinue
          Copy-Item "requirements.txt" "dist/" -ErrorAction SilentlyContinue
          Copy-Item "version.py" "dist/" -ErrorAction SilentlyContinue
        }
      shell: powershell
      
    - name: 创建发布包
      run: |
        $version = "${{ steps.version.outputs.VERSION }}"
        
        # 创建发布目录
        New-Item -ItemType Directory -Path "release" -Force
        
        # 压缩文件
        Compress-Archive -Path "dist/*" -DestinationPath "release/TomatoNovelDownloader-$version.zip"
        
        # 创建更新信息文件
        @"
        {
          "version": "$version",
          "build_time": "${{ steps.version.outputs.TIMESTAMP }}",
          "download_url": "https://github.com/${{ github.repository }}/releases/download/v$version/TomatoNovelDownloader-$version.zip",
          "changelog": "自动构建版本 $version",
          "size": $(Get-Item "release/TomatoNovelDownloader-$version.zip").Length,
          "commit": "${{ github.sha }}",
          "branch": "${{ github.ref_name }}"
        }
        "@ | Out-File -FilePath "release/update_info.json" -Encoding UTF8
        
        echo "Release package created:"
        Get-ChildItem "release"
      shell: powershell
      
    - name: 上传构建产物
      uses: actions/upload-artifact@v4
      with:
        name: TomatoNovelDownloader-${{ steps.version.outputs.VERSION }}
        path: release/
        
    - name: 创建Release
      if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.version.outputs.VERSION }}
        name: TomatoNovelDownloader v${{ steps.version.outputs.VERSION }}
        body: |
          ## 🚀 自动构建版本 ${{ steps.version.outputs.VERSION }}
          
          **构建信息:**
          - 构建时间: ${{ steps.version.outputs.TIMESTAMP }}
          - 提交哈希: ${{ github.sha }}
          - 分支: ${{ github.ref_name }}
          
          **下载说明:**
          - 下载 `TomatoNovelDownloader-${{ steps.version.outputs.VERSION }}.zip`
          - 解压后运行 `TomatoNovelDownloader-${{ steps.version.outputs.VERSION }}.exe`
          
          **更新内容:**
          - 基于最新代码自动构建
          - 修复已知问题
          - 性能优化
          
        files: |
          release/TomatoNovelDownloader-${{ steps.version.outputs.VERSION }}.zip
          release/update_info.json
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        

