name: 自动编译发布

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # 手动触发

jobs:
  build:
    strategy:
      fail-fast: false  # 不要因为一个平台失败就取消其他平台
      matrix:
        include:
          - os: windows-latest
            executable_suffix: .exe
            artifact_name: windows
          - os: ubuntu-latest
            executable_suffix: ""
            artifact_name: linux
          - os: macos-latest
            executable_suffix: ""
            artifact_name: macos
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置Python环境
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: 生成版本号
      id: version
      run: |
        if [ "${{ runner.os }}" = "Windows" ]; then
          timestamp=$(powershell -Command "Get-Date -Format 'yyyy.MM.dd.HHmm'")
          commit_short="${{ github.sha }}"
          commit_short=${commit_short:0:7}
        else
          timestamp=$(date +"%Y.%m.%d.%H%M")
          commit_short="${{ github.sha }}"
          commit_short=${commit_short:0:7}
        fi
        version="$timestamp-$commit_short"
        echo "VERSION=$version" >> $GITHUB_OUTPUT
        echo "TIMESTAMP=$timestamp" >> $GITHUB_OUTPUT
        echo "Generated version: $version"
      shell: bash
      
    - name: 更新版本信息
      run: |
        # 创建版本信息文件
        echo '# -*- coding: utf-8 -*-' > version.py
        echo '# 版本信息文件 - 由GitHub Actions自动生成' >> version.py
        echo '' >> version.py
        echo 'import os' >> version.py
        echo '' >> version.py
        echo 'VERSION="${{ steps.version.outputs.VERSION }}"' >> version.py
        echo 'BUILD_TIME="${{ steps.version.outputs.TIMESTAMP }}"' >> version.py
        echo 'COMMIT_HASH="${{ github.sha }}"' >> version.py
        echo 'BRANCH="${{ github.ref_name }}"' >> version.py
        echo 'IS_COMPILED_VERSION = True' >> version.py
        echo '' >> version.py
        echo 'def get_version_info():' >> version.py
        echo '    return {' >> version.py
        echo "        'version': VERSION," >> version.py
        echo "        'build_time': BUILD_TIME," >> version.py
        echo "        'commit_hash': COMMIT_HASH," >> version.py
        echo "        'branch': BRANCH," >> version.py
        echo "        'is_compiled': IS_COMPILED_VERSION" >> version.py
        echo '    }' >> version.py
        echo '' >> version.py
        echo 'def get_version_string():' >> version.py
        echo '    return f"v{VERSION}"' >> version.py
        echo '    ' >> version.py
        echo 'def is_development_version():' >> version.py
        echo '    """判断是否为开发版本"""' >> version.py
        echo '    return False  # 编译版本总是返回False' >> version.py
        echo '    ' >> version.py
        echo 'def get_base_version():' >> version.py
        echo '    """获取基础版本号（不包含commit hash）用于版本比较"""' >> version.py
        echo "    if '-' in VERSION:" >> version.py
        echo "        return VERSION.split('-')[0]" >> version.py
        echo '    return VERSION' >> version.py

        echo "Version file created:"
        cat version.py
      shell: bash
      
    - name: 安装系统依赖
      if: runner.os != 'Windows'
      run: |
        if [ "${{ runner.os }}" = "Linux" ]; then
          sudo apt-get update
          sudo apt-get install -y python3-tk tk-dev libxml2-dev libxslt1-dev python3-dev
        elif [ "${{ runner.os }}" = "macOS" ]; then
          brew update || true
          brew install tcl-tk libxml2 libxslt || true
        fi
      shell: bash

    - name: 缓存Python依赖
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: 安装Python依赖
      run: |
        python -m pip install --upgrade pip
        echo "安装requirements.txt中的依赖..."
        
        # 尝试安装所有依赖，如果失败则逐个安装
        if ! pip install -r requirements.txt; then
          echo "批量安装失败，尝试逐个安装..."
          pip install requests>=2.28.0,<3.0.0
          pip install Pillow>=9.0.0,<11.0.0
          pip install ebooklib>=0.18,<0.19
          pip install fake-useragent>=1.5.0,<2.0.0
          pip install tqdm>=4.65.0,<5.0.0
          pip install beautifulsoup4>=4.12.0,<5.0.0
          pip install urllib3>=1.26.0,<3.0.0
          # 可选依赖
          pip install pillow-heif>=1.0.0 || echo "pillow-heif安装失败，但这是可选的"
        fi
        
        echo "安装PyInstaller..."
        pip install pyinstaller
        
        echo "验证关键依赖是否安装成功..."
        python -c "import bs4; print('✓ beautifulsoup4/bs4 安装成功')"
        python -c "import fake_useragent; print('✓ fake_useragent 安装成功')"
        python -c "import tqdm; print('✓ tqdm 安装成功')"
        python -c "import requests; print('✓ requests 安装成功')"
        python -c "import PIL; print('✓ Pillow 安装成功')"
        python -c "import ebooklib; print('✓ ebooklib 安装成功')"
        echo "所有依赖安装验证完成！"
      shell: bash

    - name: 测试模块导入
      run: |
        echo "运行完整的模块导入测试..."
        if [ -f "test_imports.py" ]; then
          python test_imports.py
        else
          echo "⚠️ test_imports.py 不存在，跳过模块导入测试"
          echo "手动测试关键模块..."
          python -c "import requests, PIL, ebooklib, bs4, fake_useragent, tqdm, urllib3; print('✅ 所有关键模块导入成功')"
        fi
      shell: bash
        
    - name: 检查文件存在性
      run: |
        echo "当前目录文件列表:"
        ls -la
        echo "查找Python文件:"
        find . -name "*.py" -type f
        echo "检查gui.py是否存在:"
        if [ -f "gui.py" ]; then
          echo "✅ gui.py 存在"
        else
          echo "❌ gui.py 不存在"
        fi
      shell: bash

    - name: 编译可执行文件
      run: |
        echo "开始编译可执行文件..."
        
        # 检查是否存在build.spec文件
        if [ -f "build.spec" ]; then
          echo "✅ 使用build.spec配置文件编译"
          pyinstaller build.spec --clean --noconfirm
        else
          echo "⚠️ 未找到build.spec，使用默认配置编译"
          pyinstaller --onefile --windowed \
            --name="TomatoNovelDownloader" \
            --add-data="version.py:." \
            --hidden-import=bs4 \
            --hidden-import=beautifulsoup4 \
            --hidden-import=fake_useragent \
            --hidden-import=tqdm \
            --hidden-import=requests \
            --hidden-import=urllib3 \
            --hidden-import=ebooklib \
            --hidden-import=PIL \
            --hidden-import=PIL.Image \
            --hidden-import=PIL.ImageTk \
            gui.py
        fi

        # 检查编译结果
        echo "编译完成，检查输出："
        ls -la dist/
        
        # 验证可执行文件是否创建成功
        if [ "${{ runner.os }}" = "Windows" ]; then
          if [ -f "dist/TomatoNovelDownloader.exe" ]; then
            echo "✅ Windows可执行文件编译成功"
            file dist/TomatoNovelDownloader.exe || echo "文件信息获取失败"
          else
            echo "❌ Windows可执行文件编译失败"
            exit 1
          fi
        else
          if [ -f "dist/TomatoNovelDownloader" ]; then
            echo "✅ Unix可执行文件编译成功"
            file dist/TomatoNovelDownloader || echo "文件信息获取失败"
            chmod +x dist/TomatoNovelDownloader
          else
            echo "❌ Unix可执行文件编译失败"
            exit 1
          fi
        fi
      shell: bash
      
    - name: 创建发布包
      run: |
        version="${{ steps.version.outputs.VERSION }}"
        artifact_name="${{ matrix.artifact_name }}"

        # 创建发布目录结构
        mkdir -p release/TomatoNovelDownloader-$version-$artifact_name

        # 根据平台复制可执行文件
        if [ "${{ runner.os }}" = "Windows" ]; then
          # Windows平台
          if [ -f "dist/TomatoNovelDownloader.exe" ]; then
            cp dist/TomatoNovelDownloader.exe "release/TomatoNovelDownloader-$version-$artifact_name/"
            echo "✅ Windows可执行文件已复制"
          else
            echo "❌ 未找到Windows可执行文件"
            ls -la dist/
            exit 1
          fi
        else
          # Linux/macOS平台
          if [ -f "dist/TomatoNovelDownloader" ]; then
            cp dist/TomatoNovelDownloader "release/TomatoNovelDownloader-$version-$artifact_name/"
            chmod +x "release/TomatoNovelDownloader-$version-$artifact_name/TomatoNovelDownloader"
            echo "✅ Unix可执行文件已复制"
          else
            echo "❌ 未找到Unix可执行文件"
            ls -la dist/
            exit 1
          fi
        fi

        # 创建压缩包
        cd release
        if [ "${{ runner.os }}" = "Windows" ]; then
          # Windows 使用 PowerShell 自带的 Compress-Archive
          powershell -Command "Compress-Archive -Path 'TomatoNovelDownloader-$version-$artifact_name' -DestinationPath 'TomatoNovelDownloader-$version-$artifact_name.zip'"
        else
          # Linux/macOS 使用 zip 命令
          zip -r "TomatoNovelDownloader-$version-$artifact_name.zip" "TomatoNovelDownloader-$version-$artifact_name"
        fi
        cd ..

        # 创建更新信息文件
        timestamp="${{ steps.version.outputs.TIMESTAMP }}"
        repository="${{ github.repository }}"
        commit_hash="${{ github.sha }}"
        branch_name="${{ github.ref_name }}"
        
        echo '{' > "release/update_info_$artifact_name.json"
        echo "  \"version\": \"$version\"," >> "release/update_info_$artifact_name.json"
        echo "  \"platform\": \"$artifact_name\"," >> "release/update_info_$artifact_name.json"
        echo "  \"build_time\": \"$timestamp\"," >> "release/update_info_$artifact_name.json"
        echo "  \"download_url\": \"https://github.com/$repository/releases/download/v$version/TomatoNovelDownloader-$version-$artifact_name.zip\"," >> "release/update_info_$artifact_name.json"
        echo "  \"changelog\": \"自动构建版本 $version\"," >> "release/update_info_$artifact_name.json"
        echo "  \"commit\": \"$commit_hash\"," >> "release/update_info_$artifact_name.json"
        echo "  \"branch\": \"$branch_name\"" >> "release/update_info_$artifact_name.json"
        echo '}' >> "release/update_info_$artifact_name.json"

        echo "发布包创建完成："
        ls -la release/
        echo "压缩包内容："
        if [ "${{ runner.os }}" = "Windows" ]; then
          powershell -Command "Expand-Archive -Path 'release/TomatoNovelDownloader-$version-$artifact_name.zip' -DestinationPath 'temp-check' -Force; Get-ChildItem -Recurse temp-check"
        else
          unzip -l "release/TomatoNovelDownloader-$version-$artifact_name.zip"
        fi
      shell: bash
      
    - name: 上传构建产物
      uses: actions/upload-artifact@v4
      with:
        name: TomatoNovelDownloader-${{ steps.version.outputs.VERSION }}-${{ matrix.artifact_name }}
        path: release/
        
  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    permissions:
      contents: write
    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 下载所有构建产物
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: 获取最新的版本号
      id: get_version
      run: |
        # 从下载的构建产物中提取版本号
        version_file=$(find artifacts/ -name "update_info_*.json" | head -n 1)
        if [ -n "$version_file" ]; then
          version=$(jq -r '.version' "$version_file")
          timestamp=$(jq -r '.build_time' "$version_file")
          echo "VERSION=$version" >> $GITHUB_OUTPUT
          echo "TIMESTAMP=$timestamp" >> $GITHUB_OUTPUT
          echo "Found version: $version"
        else
          # fallback方案
          timestamp=$(date +"%Y.%m.%d.%H%M")
          commit_short="${{ github.sha }}"
          commit_short=${commit_short:0:7}
          version="$timestamp-$commit_short"
          echo "VERSION=$version" >> $GITHUB_OUTPUT
          echo "TIMESTAMP=$timestamp" >> $GITHUB_OUTPUT
          echo "Fallback version: $version"
        fi

    - name: 整理发布文件
      run: |
        mkdir -p release
        find artifacts/ -name "*.zip" -exec cp {} release/ \;
        find artifacts/ -name "*.json" -exec cp {} release/ \;
        ls -la release/

    - name: 创建Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ steps.get_version.outputs.VERSION }}
        name: TomatoNovelDownloader v${{ steps.get_version.outputs.VERSION }}
        body: |
          ## 🚀 自动构建版本 ${{ steps.get_version.outputs.VERSION }}

          **构建信息:**
          - 构建时间: ${{ steps.get_version.outputs.TIMESTAMP }}
          - 提交哈希: ${{ github.sha }}
          - 分支: ${{ github.ref_name }}

          **下载说明:**
          - Windows: `TomatoNovelDownloader-${{ steps.get_version.outputs.VERSION }}-windows.zip`
          - Linux: `TomatoNovelDownloader-${{ steps.get_version.outputs.VERSION }}-linux.zip`
          - macOS: `TomatoNovelDownloader-${{ steps.get_version.outputs.VERSION }}-macos.zip`

          **更新内容:**
          ${{ github.event.head_commit.message }}

        files: release/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}