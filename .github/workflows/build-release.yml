name: 多平台编译并发布

on:
  push:
    branches: [main, master]
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  build:
    strategy:
      matrix:
        include:
          # Windows
          - os: windows-latest
            platform: windows
            arch: x64
            python-arch: x64
            executable_ext: .exe
          - os: windows-latest
            platform: windows
            arch: x86
            python-arch: x86
            executable_ext: .exe
          # Linux
          - os: ubuntu-latest
            platform: linux
            arch: x64
            python-arch: x64
            executable_ext: ""
          - os: ubuntu-latest
            platform: linux
            arch: x86
            python-arch: x64
            executable_ext: ""
          - os: ubuntu-latest
            platform: linux
            arch: arm64
            python-arch: x64
            executable_ext: ""
          - os: ubuntu-latest
            platform: linux
            arch: armv7
            python-arch: x64
            executable_ext: ""
          # macOS
          - os: macos-latest
            platform: macos
            arch: x64
            python-arch: x64
            executable_ext: ""
          - os: macos-14
            platform: macos
            arch: arm64
            python-arch: arm64
            executable_ext: ""
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          architecture: ${{ matrix.python-arch }}

      - name: Install Linux dependencies
        if: ${{ matrix.platform == 'linux' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            python3-tk \
            python3-dev \
            libffi-dev \
            libssl-dev

      - name: Setup QEMU (ARM builds)
        if: ${{ matrix.platform == 'linux' && (matrix.arch == 'arm64' || matrix.arch == 'armv7') }}
        run: sudo apt-get install -y qemu-user-static binfmt-support

      - name: Install 32-bit toolchain (Linux x86)
        if: ${{ matrix.platform == 'linux' && matrix.arch == 'x86' }}
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install -y gcc-multilib g++-multilib

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          if [ -f requirements-ci.txt ]; then
            pip install -r requirements-ci.txt
          else
            pip install -r requirements.txt
          fi

      - name: Build executable
        run: |
          EXTRA_ARGS=""
          
          # macOS specific build
          if [[ "${{ matrix.platform }}" == "macos" ]]; then
            if [[ "${{ matrix.arch }}" == "x64" ]]; then
              echo "▄▄▄ Building macOS x64 (Intel) ▄▄▄"
              arch -x86_64 pyinstaller build_gui.spec --clean --noconfirm $EXTRA_ARGS
            else
              echo "▄▄▄ Building macOS arm64 (Apple Silicon) ▄▄▄"
              pyinstaller build_gui.spec --clean --noconfirm $EXTRA_ARGS
            fi
          
          # Linux specific build
          elif [[ "${{ matrix.platform }}" == "linux" ]]; then
            case "${{ matrix.arch }}" in
              arm64)
                export PYINSTALLER_COMPILE_BOOTLOADER=1
                export CC=aarch64-linux-gnu-gcc
                export CXX=aarch64-linux-gnu-g++
                ;;
              armv7)
                export PYINSTALLER_COMPILE_BOOTLOADER=1
                export CC=arm-linux-gnueabihf-gcc
                export CXX=arm-linux-gnueabihf-g++
                ;;
              x86)
                export CFLAGS="-m32"
                export LDFLAGS="-m32"
                ;;
            esac
            pyinstaller build_gui.spec --clean --noconfirm $EXTRA_ARGS
          
          # Windows and others
          else
            pyinstaller build_gui.spec --clean --noconfirm $EXTRA_ARGS
          fi

      - name: Rename artifacts
        run: |
          SOURCE_PATH="dist/TomatoNovelDownloader"
          DEST_PREFIX="FanqieDownloader_Debug"
          
          if [[ "${{ matrix.platform }}" == "windows" ]]; then
            mv "${SOURCE_PATH}.exe" "dist/${DEST_PREFIX}_windows_${{ matrix.arch }}.exe"
          else
            mv "${SOURCE_PATH}" "dist/${DEST_PREFIX}_${{ matrix.platform }}_${{ matrix.arch }}"
            chmod +x "dist/${DEST_PREFIX}_${{ matrix.platform }}_${{ matrix.arch }}"
          fi

      - name: Verify binary
        run: |
          ls -lh dist/
          file "dist/FanqieDownloader_Debug_${{ matrix.platform }}_${{ matrix.arch }}"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: fanqie-${{ matrix.platform }}-${{ matrix.arch }}
          path: |
            dist/FanqieDownloader_Debug_${{ matrix.platform }}_${{ matrix.arch }}*
            !*.dmg  # 排除不必要的文件

  release:
    needs: [build]
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: fanqie-*

      - name: Prepare release assets
        id: prepare
        run: |
          # 创建干净的发布目录
          mkdir -p release_files
          
          # 整理所有平台的可执行文件
          find artifacts/ -name "FanqieDownloader*" -exec cp {} release_files/ \;
          
          # 生成版本号（格式：v年.月.日.分钟）
          RELEASE_TAG="v$(date -u +'%Y.%m.%d.%H%M')"
          echo "Generated release tag: $RELEASE_TAG"
          
          # 写入GitHub Actions变量
          echo "tag=$RELEASE_TAG" >> "$GITHUB_OUTPUT"
          
          # 生成更新日志（最近20条提交）
          git log -20 --date=short --pretty=format:"- %ad %h: %s" > release_files/changelog.txt

      - name: Generate release notes
        run: |
          cat << EOF > release_notes.md
          # 🍅 Fanqie Novel Downloader ${{ steps.prepare.outputs.tag }}
          
          ### 🔧 支持平台
          - **macOS**
            - Intel 64-bit: \`FanqieDownloader_Debug_macos_x64\`
            - Apple Silicon: \`FanqieDownloader_Debug_macos_arm64\`
          - **Windows**
            - 64-bit: \`FanqieDownloader_Debug_windows_x64.exe\`
            - 32-bit: \`FanqieDownloader_Debug_windows_x86.exe\`
          - **Linux**
            - 主流架构: x64/x86/arm64/armv7
          
          ### 📄 更新日志
          $(cat release_files/changelog.txt)
          EOF

      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.prepare.outputs.tag }}
          name: "番茄小说下载器 ${{ steps.prepare.outputs.tag }}"
          body_path: release_notes.md
          files: |
            release_files/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
